/*
 * A threshold automata for asynchronous non-blocking atomic commitment
 * with failure detectors
 *
 * Igor Konnov, Josef Widder, 2018
 *
 * See the proof of Proposition 3.1 in:
 *
 * Rachid Guerraoui. On the Hardness of Failure-Sensitive Agreement Problems.
 * IPL, 2001, pp. 99-104.
 *
 * This file is a subject to the license that is bundled
 * together with this package and can be found in the file LICENSE.
 */

skel Proc {
  /* the control locations are as follows:
    transaction 'no' (0),
    transaction 'yes' (1),
    transaction 'no' + failure detected (2),
    transaction 'yes' + failure detected (3),
    sent (4), commit (5), abort (6), crashed (7)
   */
  local pc;
  /* the number of messages sent by the correct processes and probably by crashed */
  shared nsntNoCF, nsntYesCF;
  parameters N;

  assumptions (0) {
    N > 1;
  }

  locations (0) {
    locNO: [0]; locYES: [1];
    locNOFD: [2]; locYESFD: [3];
    locSE: [4]; locCMT: [5];
    locABR: [6]; locCR: [7];
  }

  inits (0) {
    (locNO + locYES + locNOFD + locYESFD) == N;
    locSE == 0; locCMT == 0; locABR == 0; locCR == 0;
    nsntNoCF == 0; nsntYesCF == 0;
  }

  rules (0) {
  /* the first round */
  0: locNO -> locSE
      when (true)
      do { nsntNoCF' == nsntNoCF + 1; unchanged(nsntYesCF); };
  1: locYES -> locSE
      when (true)
      do { nsntYesCF' == nsntYesCF + 1; unchanged(nsntNoCF); };
  2: locNOFD -> locABR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  3: locYESFD -> locABR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };

  /* the second round */
  4: locSE -> locABR
      when (nsntNoCF >= 1)
      do { unchanged(nsntNoCF, nsntYesCF); };

  5: locSE -> locCMT
      when (nsntNoCF < 1 && nsntYesCF >= N)
      do { unchanged(nsntNoCF, nsntYesCF); };

  /* crashing */
  6: locNO -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  7: locNOFD -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  8: locYES -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  9: locYESFD -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  10: locSE -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  11: locCMT -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  12: locABR -> locCR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };

  /* self-loops in all the initial ones and crashed,
     from which processes must progress */
  13: locSE -> locSE
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  14: locCMT -> locCMT
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  15: locABR -> locABR
      when (true)
      do { unchanged(nsntNoCF, nsntYesCF); };
  }

  specifications (0) {
    /* safety */
    agreement: [](locCMT == 0 || locABR == 0);
    abort_validity:
        (locNO != 0 || locNOFD != 0) -> [](locCMT == 0);
    commit_validity:
        (locNO == 0 && locNOFD == 0 && locYESFD == 0) -> [](locABR == 0);
    
    termination:
        (<>[](locNO == 0 && locNOFD == 0 && locYES == 0 && locYESFD == 0
                && (nsntNoCF < 1 || locSE == 0)
                && (nsntYesCF < N || nsntNoCF >= 1 || locSE == 0))
            &&
        (locNOFD == 0 && locYESFD == 0)
            &&
        [](locCR == 0))
            ->
        <>(locNO == 0 && locNOFD == 0 && locYES == 0 && locYESFD == 0 && locCR == 0);
  }
} /* Proc */


