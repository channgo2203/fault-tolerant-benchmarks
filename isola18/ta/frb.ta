/* a threshold for the folklore reliable broadcast */
skel Proc {
  /* the control locations are as follows:
    0 is the initial state with value 0,
    1 is the initial state with value 1,
    2 is the crashed state,
    3 is the accepting state
   */
  local pc;
  /* the number of messages sent by the correct
     and crashed processes (the crashed processes can send their messages
     right before crashing) */
  shared nsnt, nsntF, nfaulty;
  parameters N, T, F;

  /* the two thresholds used in the algorithm */
  define THRESH1 == 0;
  define THRESH2 == 1;

  assumptions (1) {
    N >= 1;
    N > T;
    T >= F;
  }

  locations (0) {
    loc0: [0]; /* initialized with value 0 */
    loc1: [1]; /* initialized with value 1 */
    locCR: [2]; /* crashed */
    locAC: [3]; /* accepted */
  }

  inits (0) {
    (loc0 + loc1) == N;
    locCR == 0;
    locAC == 0;
    nsnt == 0;
    nsntF == 0;
  }

  rules (0) {
  /* crashing without sending a message */
  0: loc0 -> locCR
      when (nfaulty < F)
      do { unchanged(nsnt, nsntF); nfaulty' == nfaulty + 1; };
  1: loc1 -> locCR
      when (nfaulty < F)
      do { unchanged(nsnt, nsntF); nfaulty' == nfaulty + 1; };
  /* crashing after sending a message */
  2: loc1 -> locCR
      when (nfaulty < F)
      do { nsnt' == nsnt; nsntF' == nsntF + 1; nfaulty' == nfaulty + 1; };
  /* crashing when in the accepting state */
  3: locAC -> locCR
      when (nfaulty < F)
      do { unchanged(nsnt, nsntF); nfaulty' == nfaulty + 1; };
  /* sending a message and accepting when initialized with value 1 */
  4: loc1 -> locAC
      when (nsnt >= THRESH1)
      do { nsnt' == nsnt + 1; unchanged(nsntF, nfaulty); };
  /* sending a message and accepting when initialized with value 0 */
  5: loc0 -> locAC
      when (nsnt >= THRESH2)
      do { nsnt' == nsnt + 1; unchanged(nsntF, nfaulty); };

  /* self-loops in all the locations but loc1, from which processes must progress */
  6: loc0 -> loc0
      when (nsnt >= 0)
      do { unchanged(nsnt, nsntF, nfaulty); };
  7: loc1 -> loc1 /* it is crucial to have this self-loop, although it is not obvious */
      when (nsnt >= 0)
      do { unchanged(nsnt, nsntF, nfaulty); };
  8: locAC -> locAC
      when (nsnt >= 0)
      do { unchanged(nsnt, nsntF, nfaulty); };
  }

  specifications (0) {
    /* safety */
    unforg: (loc1 == 0) -> [](locAC == 0);
    
    /* the following two liveness properties require fairness constraints */
    corr:
        <>[](((nsnt < THRESH2) || loc0 == 0)
            && ((nsnt < THRESH1) || loc1 == 0))
        -> ((loc0 == 0) -> <>(locAC != 0));

    relay:
        <>[](((nsnt < THRESH2) || loc0 == 0)
            && ((nsnt < THRESH1) || loc1 == 0))
        -> []((locAC != 0) -> <>((loc0 == 0) && (loc1 == 0)));
  }
} /* Proc */


